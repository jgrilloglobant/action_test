# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Build debug and test APK for screenshots"
  lane :build_for_screengrab do
    gradle(task: "clean")
    gradle(
    	task: 'assemble',
    	build_type: 'Debug'
    )
    gradle(
    	task: 'assemble',
    	build_type: 'AndroidTest'
    )

#     android_emulator(
#     	location: '9.1808 48.7771',
#     	package: "system-images;android-24;google_apis;x86_64",
#     	demo_mode: true,
#     	device: "Nexus 5",
#     	cold_boot: false
#     )

#     sh("mkdir android-sdk")
#     sh("wget https://dl.google.com/android/repository/commandlinetools-mac-8512546_latest.zip")
#     sh("unzip commandlinetools-mac-8512546_latest.zip")
#     sh("mv cmdline-tools latest")
#     sh("mkdir sdk")
#     sh("mkdir sdk/cmdline-tools")
#     sh("mv latest sdk/cmdline-tools")
#     sh("sdk/cmdline-tools/latest/bin/sdkmanager --update")
#     sh("yes | sdk/cmdline-tools/latest/bin/sdkmanager \"platform-tools\"")
#     sh("export ANDROID_SDK_ROOT=sdk")
#     sh("export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH")
    sh("yes | ~/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager --install \"system-images;android-29;google_apis;x86\"")
#     sh("sdk/cmdline-tools/latest/bin/sdkmanager --list | grep system-images")
#     sh("yes | sdk/cmdline-tools/latest/bin/sdkmanager --install \"system-images;android-29;default;x86\"")
    sh("echo \"no\" | ~/Library/Android/sdk/cmdline-tools/latest/bin/avdmanager --verbose create avd --force --name \"generic_20\" --package \"system-images;android-29;google_apis;x86\" --tag \"google_apis\" --abi \"x86\"")
    sh("~/Library/Android/sdk/platform-tools/adb kill-server")
    sh("~/Library/Android/sdk/platform-tools/adb start-server")
    Process.fork { `~/Library/Android/sdk/emulator/emulator @generic_20 -wipe-data` }
    sleep 20 #give the emu some boot time.
    adb(command: "wait-for-device")
#     sh("~/Library/Android/sdk/emulator/emulator @generic_18 -no-audio  -no-window > /dev/null 2>&1 &")
#     sh("emulator -list-avds")

#
#     # launch the emulator and detach
#     Process.fork { `emulator64-x86 -avd testAVD  -no-audio  -no-window` }
#     sleep 20 #give the emu some boot time.
#     adb(command: "wait-for-device")

    capture_android_screenshots(
    	locales: ["en", "es"],
    	clear_previous_screenshots: true,
    	app_apk_path: "app/build/outputs/apk/debug/app-debug.apk",
    	tests_apk_path: "app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
    )
  end

#   desc "# Submit a new Beta Build to Crashlytics Beta"
#   lane :beta do
#     gradle(task: "clean assembleRelease")
#     crashlytics
#   
#     # sh "your_script.sh"
#     # You can also use other beta testing services here
#   end
# 
#   desc "Deploy a new version to the Google Play"
#   lane :deploy do
#     gradle(task: "clean assembleRelease")
#     upload_to_play_store
#   end
end
